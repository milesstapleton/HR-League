# -*- coding: utf-8 -*-
"""Dingers_Only.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19XmRELY30mGWOSLJAHa6qxCOZWqmBCNE
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
from collections import defaultdict
import unicodedata
import re

# --- Normalize names to match regardless of accents, punctuation, or casing ---
def normalize_name(name):
    name = unicodedata.normalize('NFD', name)
    name = name.encode('ascii', 'ignore').decode('utf-8')
    name = re.sub(r'[^\w\s]', '', name)  # remove punctuation
    return name.lower().strip()

# --- Fantasy Teams ---
fantasy_teams = {
    'jim': [
        "Shohei Ohtani", "Matt Olson", "Eugenio Suarez", "Kyle Tucker", "Jackson Chourio",
        "Spencer Torkelson", "Matt McLain", "Cal Raleigh", "Heliot Ramos"
    ],
    'miles': [
        "Aaron Judge", "Jose Ramirez", "Francisco Lindor", "Gunnar Henderson", "Bobby Witt Jr.",
        "Elly De La Cruz", "Shea Langeliers", "Adolis Garcia", "Jazz Chisholm Jr."
    ],
    'ben': [
        "Bryce Harper", "Yordan Alvarez", "Marcell Ozuna", "Rafael Devers", "Wilmer Flores",
        "Freddie Freeman", "Adley Rutschman", "Mark Vientos", "Oneil Cruz"
    ],
    'rich': [
        "Mookie Betts", "Manny Machado", "Teoscar Hernandez", "Alex Bregman", "Anthony Santander",
        "Julio Rodriguez", "Max Muncy", "Matt Chapman", "Will Smith"
    ],
    'jaren': [
        "Juan Soto", "Kyle Schwarber", "Brent Rooker", "Fernando Tatis Jr.", "Austin Riley",
        "Jake Burger", "Ronald Acuna Jr.", "Lars Nootbaar", "Byron Buxton"
    ],
    'simon': [
        "Vladimir Guerrero Jr.", "Pete Alonso", "Mike Trout", "Corey Seager", "Ketel Marte",
        "Willy Adames", "Bo Bichette", "Tyler O'Neill", "Jorge Soler"
    ]
}

# --- Create normalized name lookup ---
player_team_lookup = {}
original_name_lookup = {}  # To recover proper name casing
for team, players in fantasy_teams.items():
    for player in players:
        norm = normalize_name(player)
        player_team_lookup[norm] = team
        original_name_lookup[norm] = player  # Save original name

# --- Track HRs ---
player_hr_totals = defaultdict(int)

# --- Date range ---
start_date = datetime(2025, 4, 4)
end_date = datetime.today()

# --- Loop through each day ---
print("Scraping boxscores, please wait...")

current_date = start_date
while current_date <= end_date:
    date_str = current_date.strftime('%Y-%m-%d')
    schedule_url = f"https://statsapi.mlb.com/api/v1/schedule?sportId=1&date={date_str}"
    schedule = requests.get(schedule_url).json()

    games = schedule.get('dates', [])
    if games:
        for game in games[0]['games']:
            game_pk = game['gamePk']
            box_url = f"https://statsapi.mlb.com/api/v1/game/{game_pk}/boxscore"
            box = requests.get(box_url).json()

            for team_key in ['home', 'away']:
                players = box['teams'][team_key]['players']
                for pid, player_data in players.items():
                    raw_name = player_data['person']['fullName']
                    norm_name = normalize_name(raw_name)
                    stats = player_data.get('stats', {}).get('batting', {})
                    home_runs = stats.get('homeRuns', 0)

                    if home_runs > 0 and norm_name in player_team_lookup:
                        player_hr_totals[norm_name] += home_runs

    current_date += timedelta(days=1)

print("Done scraping!")

# --- Organize results ---
results = []
for norm_name, team in player_team_lookup.items():
    hrs = player_hr_totals.get(norm_name, 0)
    results.append({
        'Player': original_name_lookup[norm_name],
        'Team': team,
        'HRs Since April 3': hrs
    })

df = pd.DataFrame(results)

# --- Sort and trim to top 6 HR hitters per team ---
top_6_per_team = (
    df.sort_values(by='HRs Since April 3', ascending=False)
      .groupby('Team')
      .head(6)
      .reset_index(drop=True)
)

# --- Fantasy Team Leaderboard (Top 6 hitters only) ---
team_leaderboard = top_6_per_team.groupby('Team')['HRs Since April 3'].sum().sort_values(ascending=False)

print("\n=== Fantasy HR Leaderboard (Top 6 Players per Team) ===")
display(team_leaderboard)

print("\n=== Top 6 Player Breakdown by Team ===")
display(top_6_per_team.sort_values(by="HRs Since April 3", ascending=False).reset_index(drop=True))